<#@ template language="C#" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ parameter type="System.String" name="entityName" #>
<#@ parameter type="System.String" name="entityNamespace" #>
<#@ parameter type="System.String" name="mappingName" #>
<#@ parameter type="System.String" name="mappingNamespace" #>
<#@ parameter type="System.String" name="server" #>
<#@ parameter type="System.String" name="database" #>
<#@ parameter type="System.String" name="table" #>
<#@ parameter type="System.String[]" name="columnNames" #>
<#@ parameter type="System.String[]" name="columnSqlTypes" #>
<#@ parameter type="System.Type[]" name="columnClrTypes" #>
<#@ parameter type="System.String[]" name="columnDefaults" #>
<#@ parameter type="System.Int32[]" name="columnLengths" #>
<#@ parameter type="System.Boolean[]" name="columnIsNullable" #>
<#@ parameter type="System.Boolean[]" name="columnIsIdentity" #>
<#@ parameter type="System.Boolean[]" name="columnIsAutoGenerated" #>
<#@ parameter type="System.Boolean[]" name="columnIsPrimaryKey" #>
using System;
using FluentNHibernate.Mapping;

namespace <#= mappingNamespace #>
{
    public class <#= mappingName #> : ClassMap<<#= entityNamespace #>.<#= entityName #>>
    {
        public <#= mappingName #>()
        {
            Cache.ReadWrite();
        
            Id(x => x.<#= columnNames[columnIsIdentity.ToList().FindIndex(x => x)]#>).GeneratedBy.Native();

<# for (int index = 0; index < columnNames.Length; index++) { if (index != columnIsIdentity.ToList().FindIndex(x => x)) { #>
            Map(x => x.<#= columnNames[index] #>);
<# }} #>        }
    }
}
